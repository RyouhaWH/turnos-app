name: SSR Deployment

on:
  push:
    branches: [ feature/ssr-hybrid-optimization ]
  pull_request:
    branches: [ feature/ssr-hybrid-optimization ]

jobs:
  test-ssr:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, session, simplexml, tokenizer, xml, xmlreader, xmlwriter, zip
        coverage: xdebug

    - name: Copy .env
      run: cp .env.example .env

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Create Database
      run: |
        mysql -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS test_db;"

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Install NPM dependencies
      run: npm ci

    - name: Build SSR
      run: npm run build:ssr

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: test_db
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit

    - name: Test SSR Server
      run: |
        timeout 10s npm run ssr || true
        echo "SSR server test completed"

  deploy-ssr:
    needs: test-ssr
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature/ssr-hybrid-optimization'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, session, simplexml, tokenizer, xml, xmlreader, xmlwriter, zip

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Build SSR
      run: npm run build:ssr

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /var/www/turnos-app
          git fetch origin
          git checkout feature/ssr-hybrid-optimization
          git pull origin feature/ssr-hybrid-optimization

          # Install dependencies
          composer install --no-dev --optimize-autoloader
          npm ci

          # Build assets
          npm run build
          npm run build:ssr

          # Clear caches
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear

          # Set permissions
          chmod -R 775 storage bootstrap/cache
          chown -R www-data:www-data storage bootstrap/cache

          # Restart services
          sudo systemctl restart php8.2-fpm
          sudo systemctl restart nginx

          # Start SSR server (in background)
          nohup node bootstrap/ssr/ssr.mjs > /var/log/ssr.log 2>&1 &

          echo "SSR deployment completed"
